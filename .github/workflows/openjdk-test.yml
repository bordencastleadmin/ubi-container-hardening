name: Build and Test UBI8 Openjdk 17 Image
on:
  pull_request:
    types: [opened, synchronize, reopened]
env:
  CONTAINER_TAG: "ubi8"
  CONTAINER_MAJOR_VERSION: "openjdk"
  CONTAINER_MINOR_VERSION: "17"
jobs:

  build-test-openjdk17-image:
    
    runs-on: ubuntu-latest
    steps:
    #The formatting on this first line might be different for the CONTAINER_VERSION_TAG, but hopefully the rest is standard and can be copied and pasted as needed for follow on container builds.
    - uses: actions/checkout@v4
    - name: Build the Docker image
      run: docker build . --file Dockerfile.ubi8-openjdk17 --build-arg CONTAINER_VERSION_TAG="${{env.CONTAINER_TAG}}/${{env.CONTAINER_MAJOR_VERSION}}-${{env.CONTAINER_MINOR_VERSION}}" --tag "localbuild/${{env.CONTAINER_TAG}}-${{env.CONTAINER_MAJOR_VERSION}}-${{env.CONTAINER_MINOR_VERSION}}"
    - name: Vulnerability scan image
      id: openjdk-scan
      uses: anchore/scan-action@v3
      with:
        image: "localbuild/${{env.CONTAINER_TAG}}-${{env.CONTAINER_MAJOR_VERSION}}-${{env.CONTAINER_MINOR_VERSION}}"
        only-fixed: true  
        severity-cutoff: critical
    - name: Upload Vulnerability Scan
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ steps.openjdk-scan.outputs.sarif }}
    - name: DoD Scap Scan
      run: docker build . --file Dockerfile.scap --build-arg CONTAINER="localbuild/${{env.CONTAINER_TAG}}-${{env.CONTAINER_MAJOR_VERSION}}-${{env.CONTAINER_MINOR_VERSION}}" --tag "localbuild/${{env.CONTAINER_TAG}}-${{env.CONTAINER_MAJOR_VERSION}}-${{env.CONTAINER_MINOR_VERSION}}-scap"
    - uses: shrink/actions-docker-extract@v3
      id: "openjdk-extract-scap"
      with:
        image: "localbuild/${{env.CONTAINER_TAG}}-${{env.CONTAINER_MAJOR_VERSION}}-${{env.CONTAINER_MINOR_VERSION}}-scap"
        path: /root/SCC/Sessions
        destination: "openjdk-scap-output"
    - name: Upload Scap Results
      uses: actions/upload-artifact@v4
      with:
        name: "Openjdk DoD SCAP Scan Results"
        path: "openjdk-scap-output"
    - name: RunInspec Scan
      run: docker build . --file Dockerfile.inspec --build-arg CONTAINER="localbuild/${{env.CONTAINER_TAG}}-${{env.CONTAINER_MAJOR_VERSION}}-${{env.CONTAINER_MINOR_VERSION}}" --tag "localbuild/${{env.CONTAINER_TAG}}-${{env.CONTAINER_MAJOR_VERSION}}-${{env.CONTAINER_MINOR_VERSION}}-inspec"
    - name: ExtractInspec Results
      uses: shrink/actions-docker-extract@v3
      id: openjdk-extract-inspec
      with:
        image: "localbuild/${{env.CONTAINER_TAG}}-${{env.CONTAINER_MAJOR_VERSION}}-${{env.CONTAINER_MINOR_VERSION}}-inspec"
        path: /tmp/junit.xml
        destination: openjdk-inspec-output
    - name: PublishInspec Test Results
      uses: EnricoMi/publish-unit-test-result-action/linux@v2
      with:
        files: |
          openjdk-inspec-output/junit.xml
    - name: UploadInspec output
      uses: actions/upload-artifact@v4
      with:
        name: Openjdk Inspec Scan Results
        path: openjdk-inspec-output

  build-test-jenkins-image:
    env:
      JENKINS_TAG: "jenkins"
      JENKINS_VERSION: "2.440.1"
    runs-on: ubuntu-latest
    needs: build-test-openjdk17-image
    steps:
    - uses: actions/checkout@v4
    - name: Clone Jenkins repository
      run: git clone --branch ${JENKINS_VERSION} https://github.com/jenkinsci/docker.git
    - name: Copy the Dockerfile.jenkins into the repo
      run: cp ./Dockerfile.jenkins ./docker/Dockerfile
    - name: Docker login
      run: echo ${{secrets.DOCKER_PASSWORD}} | docker login -u ${{secrets.DOCKER_USERNAME}} --password-stdin
    - name: Build the Docker image
      working-directory: ./docker
      run: docker build --build-arg JENKINS_VERSION=${{env.JENKINS_VERSION}}  --build-arg TARGETARCH=amd64 --tag "localbuild/${{env.JENKINS_TAG}}-${{env.CONTAINER_TAG}}-${{env.CONTAINER_MAJOR_VERSION}}-${{env.CONTAINER_MINOR_VERSION}}:${{env.JENKINS_VERSION}}" .
    - name: Vulnerability scan image
      id: jenkins-scan
      uses: anchore/scan-action@v3
      with:
        image: "localbuild/${{env.JENKINS_TAG}}-${{env.CONTAINER_TAG}}-${{env.CONTAINER_MAJOR_VERSION}}-${{env.CONTAINER_MINOR_VERSION}}:${{env.JENKINS_VERSION}}"
        only-fixed: true  
        severity-cutoff: critical
        fail-build: false
    - name: Upload Vulnerability Scan
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ steps.jenkins-scan.outputs.sarif }}
    - name: DoD Scap Scan
      run: docker build . --file Dockerfile.scap --build-arg CONTAINER="localbuild/${{env.JENKINS_TAG}}-${{env.CONTAINER_TAG}}-${{env.CONTAINER_MAJOR_VERSION}}-${{env.CONTAINER_MINOR_VERSION}}:${{env.JENKINS_VERSION}}" --tag "localbuild/${{env.JENKINS_TAG}}-${{env.CONTAINER_TAG}}-${{env.CONTAINER_MAJOR_VERSION}}-${{env.CONTAINER_MINOR_VERSION}}:${{env.JENKINS_VERSION}}-scap"
    - uses: shrink/actions-docker-extract@v3
      id: "jenkins-extract-scap"
      with:
        image: "localbuild/${{env.JENKINS_TAG}}-${{env.CONTAINER_TAG}}-${{env.CONTAINER_MAJOR_VERSION}}-${{env.CONTAINER_MINOR_VERSION}}:${{env.JENKINS_VERSION}}-scap"
        path: /root/SCC/Sessions
        destination: jenkins-scap-output
    - name: Upload Scap Results
      uses: actions/upload-artifact@v4
      with:
        name: "Jenkins DoD SCAP Scan Results"
        path: jenkins-scap-output
    - name: RunInspec Scan
      run: docker build . --file Dockerfile.inspec --build-arg CONTAINER="localbuild/${{env.JENKINS_TAG}}-${{env.CONTAINER_TAG}}-${{env.CONTAINER_MAJOR_VERSION}}-${{env.CONTAINER_MINOR_VERSION}}:${{env.JENKINS_VERSION}}" --tag "localbuild/${{env.JENKINS_TAG}}-${{env.CONTAINER_TAG}}-${{env.CONTAINER_MAJOR_VERSION}}-${{env.CONTAINER_MINOR_VERSION}}:${{env.JENKINS_VERSION}}-inspec"
    - name: ExtractInspec Results
      uses: shrink/actions-docker-extract@v3
      id: "jenkins-extract-inspec"
      with:
        image: "localbuild/${{env.JENKINS_TAG}}-${{env.CONTAINER_TAG}}-${{env.CONTAINER_MAJOR_VERSION}}-${{env.CONTAINER_MINOR_VERSION}}:${{env.JENKINS_VERSION}}-inspec"
        path: /tmp/junit.xml
        destination: jenkins-inspec-output
    - name: PublishInspec Test Results
      uses: EnricoMi/publish-unit-test-result-action/linux@v2
      with:
        files: |
          "jenkins-inspec-output/junit.xml"
    - name: UploadInspec output
      uses: actions/upload-artifact@v4
      with:
        name: "Jenkins Inspec Scan Results"
        path: "jenkins-inspec-output"
