name: Build, Test, and Push Containers

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  COMPLIANCE_AS_CODE_VERSION: "0.1.69"

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
      actions: read
    strategy:
      matrix:
        include:
          - name: "ubi8"
            repo_name: "registry.redhat.io/ubi8"
            dockerfile: "Dockerfile.ubi8"
            goss_file: "goss-ubi8.yaml"
          - name: "ubi8-python-39"
            repo_name: "registry.redhat.io/ubi8/python-39"
            dockerfile: "Dockerfile.ubi8-python"
            goss_file: "goss-ubi8-python-39.yaml"
          - name: "ubi8-openjdk-17"
            repo_name: "registry.redhat.io/ubi8/openjdk-17"
            dockerfile: "Dockerfile.ubi8-openjdk"
            goss_file: "goss-ubi8-openjdk-17.yaml"

    services:
      openscap:
        image: alpine:3.18.3
        options: >-
          --entrypoint ""
          -v /var/run/docker.sock:/var/run/docker.sock
          -v ${{ github.workspace }}:/workspace
          --workdir /workspace
          --privileged

    steps:
      - uses: actions/checkout@v4

      - name: Log in to Red Hat Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.redhat.io
          username: ${{ secrets.REDHAT_USERNAME }}
          password: ${{ secrets.REDHAT_PASSWORD }}

      - name: Pull base image from Red Hat
        run: |
          docker pull ${{ matrix.repo_name }}

      - name: Get base image version tag
        id: get-version
        run: |
          VERSION=$(docker inspect --format '{{ index .RepoTags 0 }}' ${{ matrix.repo_name }} | awk -F ':' '{print $2}')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build the Docker image
        run: |
          docker build . \
            --file ${{ matrix.dockerfile }} \
            --build-arg BASE_IMAGE="${{ matrix.repo_name }}" \
            --build-arg COMPLIANCE_AS_CODE_VERSION="${{ env.COMPLIANCE_AS_CODE_VERSION }}" \
            --tag "localbuild/${{ matrix.name }}:${{ env.VERSION }}"

      - name: Setup OpenSCAP Tools
        run: |
          docker exec openscap apk update
          docker exec openscap apk add curl docker openscap-docker npm gcompat unzip jq
          docker exec openscap npm install -g "@microsoft/sarif-multitool@4.3.5"
          docker exec openscap npm install -g "@mitre/saf@1.2.33"
          docker exec openscap mkdir -p ssg
          docker exec openscap curl "https://github.com/ComplianceAsCode/content/releases/download/v${{ env.COMPLIANCE_AS_CODE_VERSION }}/scap-security-guide-${{ env.COMPLIANCE_AS_CODE_VERSION }}.zip" -Lso "ssg/ssg.zip"
          docker exec openscap unzip "ssg/ssg.zip" -d "ssg"

      - name: Run OpenSCAP Scan
        run: |
          IMAGE_NAME="localbuild/${{ matrix.name }}:${{ env.VERSION }}"
          container_id=$(docker create "${IMAGE_NAME}")
          docker cp -L "$container_id:/etc/os-release" .
          docker rm "$container_id"

          version_id=$(awk -F= '$1=="VERSION_ID" { print $2 ;}' os-release | sed 's/"//g')
          id=$(awk -F= '$1=="ID" { print $2 ;}' os-release | sed 's/"//g')

          if [ "${id}" = "rhel" ] && echo "${version_id}" | grep -qE '^8(\..*)?$'; then
            ssg="scap-security-guide-${{ env.COMPLIANCE_AS_CODE_VERSION }}/ssg-rhel8-ds.xml"
            profile="xccdf_org.ssgproject.content_profile_stig"
          elif [ "${id}" = "rhel" ] && echo "${version_id}" | grep -qE '^9(\..*)?$'; then
            ssg="scap-security-guide-${{ env.COMPLIANCE_AS_CODE_VERSION }}/ssg-rhel9-ds.xml"
            profile="xccdf_org.ssgproject.content_profile_stig"
          else
            ssg="scap-security-guide-${{ env.COMPLIANCE_AS_CODE_VERSION }}/ssg-rhel9-ds.xml"
            profile="xccdf_org.ssgproject.content_profile_stig"
          fi

          docker exec openscap oscap-docker image "${IMAGE_NAME}" xccdf eval \
            --verbose ERROR \
            --fetch-remote-resources \
            --profile "${profile}" \
            --results "openscap-report-${{ matrix.name }}.xml" \
            --report "openscap-report-${{ matrix.name }}.html" \
            "ssg/${ssg}"

      - name: Upload OpenSCAP Results
        uses: actions/upload-artifact@v4
        with:
          name: "OpenSCAP Scan Results - ${{ matrix.name }}"
          path: |
            openscap-report-${{ matrix.name }}.html
            openscap-report-${{ matrix.name }}.xml

      - name: Vulnerability scan image
        id: vulnerability-scan
        uses: anchore/scan-action@v3
        with:
          image: "localbuild/${{ matrix.name }}:${{ env.VERSION }}"
          only-fixed: true
          severity-cutoff: critical
          fail-build: false

      - name: Upload Vulnerability Scan
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.vulnerability-scan.outputs.sarif }}

      - name: Tag and Push Docker image
        if: github.event_name == 'push'
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          
          docker tag "localbuild/${{ matrix.name }}:${{ env.VERSION }}" "${{ secrets.DOCKER_USERNAME }}/${{ matrix.name }}:latest"
          docker push "${{ secrets.DOCKER_USERNAME }}/${{ matrix.name }}:latest"
          
          docker tag "localbuild/${{ matrix.name }}:${{ env.VERSION }}" "${{ secrets.DOCKER_USERNAME }}/${{ matrix.name }}:${{ env.VERSION }}"
          docker push "${{ secrets.DOCKER_USERNAME }}/${{ matrix.name }}:${{ env.VERSION }}"
          
          docker tag "localbuild/${{ matrix.name }}:${{ env.VERSION }}" "${{ secrets.DOCKER_USERNAME }}/${{ matrix.name }}:${{ github.sha }}"
          docker push "${{ secrets.DOCKER_USERNAME }}/${{ matrix.name }}:${{ github.sha }}"

      - name: Docker logout
        if: github.event_name == 'push' && always()
        run: docker logout
