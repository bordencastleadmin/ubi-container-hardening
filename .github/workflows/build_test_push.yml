name: Build, Test, and Push Containers

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  build-and-scan-containers:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        container:
          - {repo: "registry.access.redhat.com/ubi8", container_name: "ubi", dockerfile: "Dockerfile.ubi8", version_tag: "8.10", build_args: null}
          - {repo: "registry.access.redhat.com/ubi8", container_name: "python-39", dockerfile: "Dockerfile.ubi8-python", version_tag: "latest", build_args: null}
          - {repo: "registry.access.redhat.com/ubi8", container_name: "openjdk-17", dockerfile: "Dockerfile.ubi8-openjdk17", version_tag: "latest", build_args: null}
          - {repo: "registry.access.redhat.com/ubi8/openjdk-17", container_name: "jenkins", dockerfile: "Dockerfile.jenkins", version_tag: "2.449", build_args: "--build-arg BASE_IMAGE=registry.access.redhat.com/ubi8/openjdk-17:latest --build-arg JENKINS_TAG=jenkins --build-arg JENKINS_VERSION=2.449 --build-arg TARGETARCH=amd64"}

    steps:
      - uses: actions/checkout@v4

      # Build Docker images from RedHat registry
      - name: Build Docker Image
        run: |
          docker build . \
            --no-cache \
            --file ${{ matrix.container.dockerfile }} \
            --build-arg BASE_IMAGE="${{ matrix.container.repo }}:latest" \
            ${{ matrix.container.build_args }} \
            --tag "${{ matrix.container.container_name }}:${{ matrix.container.version_tag }}"

      # Vulnerability scan for the images
      - name: Vulnerability scan image
        id: vulnerability-scan
        uses: anchore/scan-action@v3
        with:
          image: "${{ matrix.container.container_name }}:${{ matrix.container.version_tag }}"
          only-fixed: true
          severity-cutoff: critical
          fail-build: false

      - name: Upload Vulnerability Scan
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.vulnerability-scan.outputs.sarif }}

      # DoD SCAP Scan for Containers
      - name: Run DoD SCAP Scan
        run: docker build . --file Dockerfile.DoDscap --build-arg CONTAINER="${{ matrix.container.container_name }}:${{ matrix.container.version_tag }}" --tag "${{ matrix.container.container_name }}:${{ matrix.container.version_tag }}-dodscap"

      - name: Extract DoD SCAP Results
        uses: shrink/actions-docker-extract@v3
        with:
          image: "${{ matrix.container.container_name }}:${{ matrix.container.version_tag }}-dodscap"
          path: /root/SCC/Sessions
          destination: container-scap-output

      - name: Upload DoD SCAP Results
        uses: actions/upload-artifact@v4
        with:
          name: "DoD SCAP Scan Results - ${{ matrix.container.container_name }}"
          path: container-scap-output

      # OpenSCAP Scan for Containers
      - name: Run OpenSCAP Scan
        run: docker build . --file Dockerfile.Openscap --build-arg CONTAINER="${{ matrix.container.container_name }}:${{ matrix.container.version_tag }}" --tag "${{ matrix.container.container_name }}:${{ matrix.container.version_tag }}-scap"

      - uses: shrink/actions-docker-extract@v3
        id: "extract-openscap"
        with:
          image: "${{ matrix.container.container_name }}:${{ matrix.container.version_tag }}-scap"
          path: /tmp/openscap.html
          destination: container-openscap-output

      - name: Upload OpenSCAP Results
        uses: actions/upload-artifact@v4
        with:
          name: "OpenSCAP Scan Results - ${{ matrix.container.container_name }}"
          path: container-openscap-output

      # Inspec Scan for Containers
      - name: Run Inspec Scan
        run: docker build . --file Dockerfile.inspec --build-arg CONTAINER="${{ matrix.container.container_name }}:${{ matrix.container.version_tag }}" --tag "${{ matrix.container.container_name }}:${{ matrix.container.version_tag }}-inspec"

      - name: Extract Inspec Results
        uses: shrink/actions-docker-extract@v3
        with:
          image: "${{ matrix.container.container_name }}:${{ matrix.container.version_tag }}-inspec"
          path: /tmp/junit.xml
          destination: container-inspec-output

      - name: Publish Inspec Test Results
        uses: EnricoMi/publish-unit-test-result-action/linux@v2
        with:
          files: |
            container-inspec-output/junit.xml

      # Tag and Push Containers to DockerHub (Optional)
      - name: Tag and Push Docker Image
        if: github.event_name == 'push'
        run: |
          docker tag "${{ matrix.container.container_name }}:${{ matrix.container.version_tag }}" "${{ secrets.DOCKER_USERNAME }}/${{ matrix.container.container_name }}:${{ matrix.container.version_tag }}"
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push "${{ secrets.DOCKER_USERNAME }}/${{ matrix.container.container_name }}:${{ matrix.container.version_tag }}"

      - name: Docker logout
        if: github.event_name == 'push'
        run: docker logout
