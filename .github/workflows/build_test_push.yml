name: Build, Test, and Push Containers

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        container:
          # Allow passing dynamic Red Hat repository names for more flexibility
          - {name: "ubi", repo_name: "registry.access.redhat.com/ubi8", version: "8.10", dockerfile: "Dockerfile.ubi8"}
          - {name: "ubi-python", repo_name: "registry.access.redhat.com/ubi8/python-39", version: "latest", dockerfile: "Dockerfile.ubi8-python"}
          - {name: "ubi-openjdk", repo_name: "registry.access.redhat.com/ubi8/openjdk-17", version: "latest", dockerfile: "Dockerfile.ubi8-openjdk17"}
    
    steps:
      - uses: actions/checkout@v4

      - name: Build the Docker image
        run: |
          docker build . \
            --file ${{ matrix.container.dockerfile }} \
            --build-arg CONTAINER_VERSION_TAG="${{ matrix.container.repo_name }}:${{ matrix.container.version }}" \
            --tag "localbuild/${{ matrix.container.repo_name }}-${{ matrix.container.version }}"

      - name: Vulnerability scan image
        id: vulnerability-scan
        uses: anchore/scan-action@v3
        with:
          image: "localbuild/${{ matrix.container.repo_name }}"
          only-fixed: true
          continue-on-error: true

      - name: Upload Vulnerability Scan
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.vulnerability-scan.outputs.sarif }}

      - name: Run DoD SCAP Scan
        run: docker build . --file Dockerfile.DoDscap --build-arg CONTAINER="localbuild/${{ matrix.container.repo_name }}" --tag "localbuild/${{ matrix.container.repo_name }}-dodscap"

      - uses: shrink/actions-docker-extract@v3
        id: "ubi-extract-scap"
        with:
          image: "localbuild/${{ matrix.container.repo_name }}-dodscap"
          path: /root/SCC/Sessions
          destination: ubi-scap-output

      - name: Upload SCAP Results
        uses: actions/upload-artifact@v4
        with:
          name: "UBI DoD SCAP Scan Results"
          path: ubi-scap-output

      - name: Run OpenSCAP Scan with OpenSCAP Docker
        run: |
          docker run --rm \
            -v $(pwd):/root/scan \
            -v /tmp:/tmp \
            quay.io/openscap/openscap-docker \
            oscap xccdf eval \
            --profile xccdf_org.ssgproject.content_profile_standard \
            --results /tmp/openscap-results.xml \
            --report /tmp/openscap-report.html \
            /root/scan/ssg-ubi8-ds.xml

      - name: Extract OpenSCAP Results
        run: |
          mkdir -p ubi-openscap-output
          cp /tmp/openscap-report.html ubi-openscap-output/
          cp /tmp/openscap-results.xml ubi-openscap-output/

      - name: Upload OpenSCAP Results
        uses: actions/upload-artifact@v4
        with:
          name: "UBI OpenSCAP Scan Results"
          path: ubi-openscap-output

      - name: Run Inspec Scan
        run: docker build . --file Dockerfile.inspec --build-arg CONTAINER="localbuild/${{ matrix.container.repo_name }}" --tag "localbuild/${{ matrix.container.repo_name }}-inspec"

      - uses: shrink/actions-docker-extract@v3
        id: "ubi-extract-inspec"
        with:
          image: "localbuild/${{ matrix.container.repo_name }}-inspec"
          path: /tmp/junit.xml
          destination: ubi-inspec-output

      - name: Publish Inspec Test Results
        uses: EnricoMi/publish-unit-test-result-action/linux@v2
        with:
          files: |
            ubi-inspec-output/junit.xml

      - name: Upload Inspec Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: "UBI Inspec Scan Results"
          path: ubi-inspec-output
          
      # Conditional push only if the event is a push (merge) and not a pull request
      - name: Tag and Push Docker image
        if: github.event_name == 'push'
        run: |
          docker tag "localbuild/${{ matrix.container.repo_name }}-${{ matrix.container.version }}" "${{ secrets.DOCKER_USERNAME }}/${{ matrix.container.repo_name }}-${{ matrix.container.version }}:latest"
          docker tag "localbuild/${{ matrix.container.repo_name }}-${{ matrix.container.version }}" "${{ secrets.DOCKER_USERNAME }}/${{ matrix.container.repo_name }}-${{ matrix.container.version }}:${{ github.sha }}"
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push "${{ secrets.DOCKER_USERNAME }}/${{ matrix.container.repo_name }}-${{ matrix.container.version }}:latest"
          docker push "${{ secrets.DOCKER_USERNAME }}/${{ matrix.container.repo_name }}-${{ matrix.container.version }}:${{ github.sha }}"

      - name: Docker logout
        if: github.event_name == 'push'
        run: docker logout
