name: Build, Test, and Push Containers

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  COMPLIANCE_AS_CODE_VERSION: "0.1.77"

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - {name: "ubi8", repo_name: "registry.redhat.io/ubi8", dockerfile: "Dockerfile.ubi8", goss_file: "goss-ubi8.yaml"}
          #- {name: "ubi9", repo_name: "registry.redhat.io/ubi9", dockerfile: "Dockerfile.ubi9", goss_file: "goss-ubi9.yaml"}
          #- {name: "ubi10", repo_name: "registry.redhat.io/ubi10", dockerfile: "Dockerfile.ubi10", goss_file: "goss-ubi10.yaml"}
          # UBI 8 Python variants
          - {name: "ubi8-python-39", repo_name: "registry.redhat.io/ubi8/python-39", dockerfile: "Dockerfile.ubi8-python", goss_file: "goss-ubi8-python-39.yaml"}
          - {name: "ubi8-python-311", repo_name: "registry.redhat.io/ubi8/python-311", dockerfile: "Dockerfile.ubi8-python", goss_file: "goss-ubi8-python-311.yaml"}
          # UBI 8 OpenJDK variants
          - {name: "ubi8-openjdk-17", repo_name: "registry.redhat.io/ubi8/openjdk-17", dockerfile: "Dockerfile.ubi8-openjdk", goss_file: "goss-ubi8-openjdk-17.yaml"}
          - {name: "ubi8-openjdk-21", repo_name: "registry.redhat.io/ubi8/openjdk-21", dockerfile: "Dockerfile.ubi8-openjdk", goss_file: "goss-ubi8-openjdk-21.yaml"}
    
    steps:
      - uses: actions/checkout@v4

      # Login to Red Hat registries for authenticated access
      - name: Log in to Red Hat Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.redhat.io
          username: ${{ secrets.REDHAT_USERNAME }}
          password: ${{ secrets.REDHAT_PASSWORD }}

      - name: Pull base image from Red Hat
        run: |
          docker pull ${{ matrix.repo_name }}

      - name: Get base image version tag
        id: get-version
        run: |
          VERSION=$(docker inspect --format '{{ index .RepoTags 0 }}' ${{ matrix.repo_name }} | awk -F ':' '{print $2}')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      
      - name: Debug Build Arguments
        run: |
          echo "BASE_IMAGE=${{ matrix.repo_name }}"
          echo "COMPLIANCE_AS_CODE_VERSION=${{ env.COMPLIANCE_AS_CODE_VERSION }}"
          
      - name: Build the Docker image
        run: |
          docker build . \
            --file ${{ matrix.dockerfile }} \
            --build-arg BASE_IMAGE="${{ matrix.repo_name }}" \
            --build-arg COMPLIANCE_AS_CODE_VERSION="${{ env.COMPLIANCE_AS_CODE_VERSION }}" \
            --tag "localbuild/${{ matrix.name }}:${{ env.VERSION }}"

      - name: Vulnerability scan image
        id: vulnerability-scan
        uses: anchore/scan-action@v3
        with:
          image: "localbuild/${{ matrix.name }}:${{ env.VERSION }}"
          only-fixed: true
          severity-cutoff: critical
          fail-build: false

      - name: Upload Vulnerability Scan
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.vulnerability-scan.outputs.sarif }}

      - name: Run OpenSCAP Scan with Script
        run: |
          chmod +x ./openscap-scan.sh
          ./openscap-scan.sh \
            --container "localbuild/${{ matrix.name }}:${{ env.VERSION }}" \
            --compliance-version "${{ env.COMPLIANCE_AS_CODE_VERSION }}" \
            --output-dir "ubi-openscap-output"

      - name: Parse OpenSCAP Results Summary
        if: always()
        run: |
          if [ -f "ubi-openscap-output/oscap-report.xml" ]; then
            echo "## OpenSCAP Scan Summary for ${{ matrix.name }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Extract basic statistics from the XCCDF report
            PASS_COUNT=$(grep -o 'result="pass"' ubi-openscap-output/oscap-report.xml | wc -l || echo "0")
            FAIL_COUNT=$(grep -o 'result="fail"' ubi-openscap-output/oscap-report.xml | wc -l || echo "0")
            ERROR_COUNT=$(grep -o 'result="error"' ubi-openscap-output/oscap-report.xml | wc -l || echo "0")
            UNKNOWN_COUNT=$(grep -o 'result="unknown"' ubi-openscap-output/oscap-report.xml | wc -l || echo "0")
            NOTAPPLICABLE_COUNT=$(grep -o 'result="notapplicable"' ubi-openscap-output/oscap-report.xml | wc -l || echo "0")
            
            echo "| Result | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| ‚úÖ Pass | $PASS_COUNT |" >> $GITHUB_STEP_SUMMARY
            echo "| ‚ùå Fail | $FAIL_COUNT |" >> $GITHUB_STEP_SUMMARY
            echo "| ‚ö†Ô∏è Error | $ERROR_COUNT |" >> $GITHUB_STEP_SUMMARY
            echo "| ‚ùì Unknown | $UNKNOWN_COUNT |" >> $GITHUB_STEP_SUMMARY
            echo "| ‚ûñ Not Applicable | $NOTAPPLICABLE_COUNT |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üìÅ Full results available in the artifacts section." >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è OpenSCAP report not found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload OpenSCAP Scan Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: "OpenSCAP Scan Results - ${{ matrix.name }}"
          path: ubi-openscap-output

      - name: Comment OpenSCAP Results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              // Check if HTML report exists
              const htmlPath = path.join('ubi-openscap-output', 'openscap.html');
              if (fs.existsSync(htmlPath)) {
                const htmlSize = fs.statSync(htmlPath).size;
                const comment = `## üîí OpenSCAP Security Scan Results - ${{ matrix.name }}
                
                The OpenSCAP security scan has completed for \`${{ matrix.name }}\`.
                
                üìä **Scan Details:**
                - Container: \`localbuild/${{ matrix.name }}:${{ env.VERSION }}\`
                - Compliance Version: \`${{ env.COMPLIANCE_AS_CODE_VERSION }}\`
                - Report Size: ${(htmlSize / 1024).toFixed(2)} KB
                
                üìÅ **Artifacts Generated:**
                - HTML Report: \`openscap.html\` (downloadable from workflow artifacts)
                - XML Report: \`oscap-report.xml\` (if available)
                
                ‚¨áÔ∏è Download the complete scan results from the workflow artifacts to view detailed findings.
                `;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch (error) {
              console.log('Could not post OpenSCAP results comment:', error.message);
            }

#      - name: Run Inspec Scan
#        run: docker build . \
#          --file Dockerfile.inspec \
#          --build-arg CONTAINER="localbuild/${{ matrix.name }}:${{ env.VERSION }}" \
#          --build-arg COMPLIANCE_AS_CODE_VERSION="${{ env.COMPLIANCE_AS_CODE_VERSION }}" \
#          --tag "localbuild/${{ matrix.name }}-inspec"

#      - name: Extract Inspec Results
#        uses: shrink/actions-docker-extract@v3
#        with:
#          image: "localbuild/${{ matrix.name }}-inspec"
#          path: /tmp/junit.xml
#          destination: ubi-inspec-output

#      - name: Publish Inspec Test Results
#        uses: EnricoMi/publish-unit-test-result-action/linux@v2
#        with:
#          files: |
#            ubi-inspec-output/junit.xml

#      - name: Upload Inspec Scan Results
#        uses: actions/upload-artifact@v4
#        with:
#          name: "Inspec Scan Results - ${{ matrix.name }}"
#          path: ubi-inspec-output

      - name: Tag and Push Docker image
        if: github.event_name == 'push'
        run: |
          docker tag "localbuild/${{ matrix.name }}:${{ env.VERSION }}" "${{ secrets.DOCKER_USERNAME }}/${{ matrix.name }}:latest"
          docker tag "localbuild/${{ matrix.name }}:${{ env.VERSION }}" "${{ secrets.DOCKER_USERNAME }}/${{ matrix.name }}:${{ env.VERSION }}"
          docker tag "localbuild/${{ matrix.name }}:${{ env.VERSION }}" "${{ secrets.DOCKER_USERNAME }}/${{ matrix.name }}:${{ github.sha }}"
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push "${{ secrets.DOCKER_USERNAME }}/${{ matrix.name }}:latest"
          docker push "${{ secrets.DOCKER_USERNAME }}/${{ matrix.name }}:${{ env.VERSION }}"
          docker push "${{ secrets.DOCKER_USERNAME }}/${{ matrix.name }}:${{ github.sha }}"

      - name: Docker logout
        if: github.event_name == 'push'
        run: docker logout