name: Build, Test, and Push Containers

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        container:
          - base: {name: "ubi", repo_name: "registry.access.redhat.com/ubi8", dockerfile: "Dockerfile.ubi8", version_tag: "8.10"}
            app: null  # Placeholder for future apps building off UBI
          - base: {name: "ubi-python", repo_name: "registry.access.redhat.com/ubi8/python-39", dockerfile: "Dockerfile.ubi8-python", version_tag: "latest"}
            app: null  # Placeholder for future apps building off UBI Python
          - base: {name: "ubi-openjdk", repo_name: "registry.access.redhat.com/ubi8/openjdk-17", dockerfile: "Dockerfile.ubi8-openjdk17", version_tag: "latest"}
            app: {name: "jenkins", repo_name: "localbuild/ubi-openjdk", dockerfile: "Dockerfile.jenkins", version_tag: "latest"}

    steps:
      - uses: actions/checkout@v4

      # Build and Scan Base Container
      - name: Build Base Docker Image
        run: |
          docker build . \
            --file ${{ matrix.container.base.dockerfile }} \
            --build-arg CONTAINER_VERSION_TAG="${{ matrix.container.base.repo_name }}:${{ matrix.container.base.version_tag }}" \
            --tag "localbuild/${{ matrix.container.base.repo_name }}:${{ matrix.container.base.version_tag }}"

      - name: Vulnerability scan base image
        id: base-vulnerability-scan
        uses: anchore/scan-action@v3
        with:
          image: "localbuild/${{ matrix.container.base.repo_name }}:${{ matrix.container.base.version_tag }}"
          only-fixed: true
          severity-cutoff: critical
          fail-build: false

      - name: Upload Base Vulnerability Scan
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.base-vulnerability-scan.outputs.sarif }}

      # Build and Scan App Container (Jenkins)
      - name: Build Jenkins Docker Image
        if: matrix.container.app != null
        run: |
          docker build . \
            --file ${{ matrix.container.app.dockerfile }} \
            --build-arg BASE_IMAGE="localbuild/${{ matrix.container.app.repo_name }}:${{ matrix.container.base.version_tag }}" \
            --tag "localbuild/${{ matrix.container.app.repo_name }}:${{ matrix.container.app.version_tag }}"

      - name: Vulnerability scan Jenkins image
        if: matrix.container.app != null
        id: app-vulnerability-scan
        uses: anchore/scan-action@v3
        with:
          image: "localbuild/${{ matrix.container.app.repo_name }}:${{ matrix.container.app.version_tag }}"
          only-fixed: true
          severity-cutoff: critical
          fail-build: false

      - name: Upload Jenkins Vulnerability Scan
        if: matrix.container.app != null
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.app-vulnerability-scan.outputs.sarif }}

      # OpenSCAP Scan for Base Container
      - name: Run OpenSCAP Scan for Base
        run: docker build . --file Dockerfile.Openscap --build-arg CONTAINER="localbuild/${{ matrix.container.base.repo_name }}:${{ matrix.container.base.version_tag }}" --tag "localbuild/${{ matrix.container.base.repo_name }}:${{ matrix.container.base.version_tag }}-scap"

      - uses: shrink/actions-docker-extract@v3
        id: "base-extract-openscap"
        with:
          image: "localbuild/${{ matrix.container.base.repo_name }}:${{ matrix.container.base.version_tag }}-scap"
          path: /tmp/openscap.html
          destination: base-openscap-output

      - name: Upload OpenSCAP Results for Base
        uses: actions/upload-artifact@v4
        with:
          name: "OpenSCAP Scan Results - ${{ matrix.container.base.name }}"
          path: base-openscap-output

      # OpenSCAP Scan for Jenkins Container
      - name: Run OpenSCAP Scan for Jenkins
        if: matrix.container.app != null
        run: docker build . --file Dockerfile.Openscap --build-arg CONTAINER="localbuild/${{ matrix.container.app.repo_name }}:${{ matrix.container.app.version_tag }}" --tag "localbuild/${{ matrix.container.app.repo_name }}:${{ matrix.container.app.version_tag }}-scap"

      - uses: shrink/actions-docker-extract@v3
        id: "app-extract-openscap"
        if: matrix.container.app != null
        with:
          image: "localbuild/${{ matrix.container.app.repo_name }}:${{ matrix.container.app.version_tag }}-scap"
          path: /tmp/openscap.html
          destination: app-openscap-output

      - name: Upload OpenSCAP Results for Jenkins
        if: matrix.container.app != null
        uses: actions/upload-artifact@v4
        with:
          name: "OpenSCAP Scan Results - Jenkins"
          path: app-openscap-output

      # Tag and Push Base Docker Image
      - name: Tag and Push Base Docker Image
        if: github.event_name == 'push'
        run: |
          docker tag "localbuild/${{ matrix.container.base.repo_name }}:${{ matrix.container.base.version_tag }}" "${{ secrets.DOCKER_USERNAME }}/${{ matrix.container.base.repo_name }}:${{ matrix.container.base.version_tag }}"
          docker tag "localbuild/${{ matrix.container.base.repo_name }}:${{ matrix.container.base.version_tag }}" "${{ secrets.DOCKER_USERNAME }}/${{ matrix.container.base.repo_name }}:latest"
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push "${{ secrets.DOCKER_USERNAME }}/${{ matrix.container.base.repo_name }}:${{ matrix.container.base.version_tag }}"
          docker push "${{ secrets.DOCKER_USERNAME }}/${{ matrix.container.base.repo_name }}:latest"

      # Tag and Push Jenkins Docker Image
      - name: Tag and Push Jenkins Docker Image
        if: github.event_name == 'push' && matrix.container.app != null
        run: |
          docker tag "localbuild/${{ matrix.container.app.repo_name }}:${{ matrix.container.app.version_tag }}" "${{ secrets.DOCKER_USERNAME }}/${{ matrix.container.app.repo_name }}:${{ matrix.container.app.version_tag }}"
          docker tag "localbuild/${{ matrix.container.app.repo_name }}:${{ matrix.container.app.version_tag }}" "${{ secrets.DOCKER_USERNAME }}/${{ matrix.container.app.repo_name }}:latest"
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push "${{ secrets.DOCKER_USERNAME }}/${{ matrix
