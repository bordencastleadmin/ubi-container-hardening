name: Build, Test, and Push Containers

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  build-base-containers:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        base_container:
          - {name: "ubi", repo_name: "registry.access.redhat.com/ubi8", dockerfile: "Dockerfile.ubi8", version_tag: "8.10"}
          - {name: "ubi-python", repo_name: "registry.access.redhat.com/ubi8/python-39", dockerfile: "Dockerfile.ubi8-python", version_tag: "latest"}
          - {name: "ubi-openjdk", repo_name: "registry.access.redhat.com/ubi8/openjdk-17", dockerfile: "Dockerfile.ubi8-openjdk17", version_tag: "latest"}

    steps:
      - uses: actions/checkout@v4

      # Load Docker cache (restoring previous cache if available)
      - name: Load Docker cache
        uses: actions/cache@v3
        with:
          path: /tmp/.docker-cache
          key: docker-build-${{ matrix.base_container.repo_name }}-${{ matrix.base_container.version_tag }}
          restore-keys: |
            docker-build-

      # Build base images locally from RedHat registry
      - name: Build Base Docker Image
        run: |
          docker build . \
            --file ${{ matrix.base_container.dockerfile }} \
            --build-arg BASE_IMAGE="${{ matrix.base_container.repo_name }}:${{ matrix.base_container.version_tag }}" \
            --tag "localbuild/${{ matrix.base_container.repo_name }}:${{ matrix.base_container.version_tag }}"

      # Save Docker layers for base images
      - name: Save Docker layers for base images
        uses: actions/cache@v3
        with:
          path: /tmp/.docker-cache
          key: docker-build-${{ matrix.base_container.repo_name }}-${{ matrix.base_container.version_tag }}

      # Vulnerability scan for the base images
      - name: Vulnerability scan base image
        id: base-vulnerability-scan
        uses: anchore/scan-action@v3
        with:
          image: "localbuild/${{ matrix.base_container.repo_name }}:${{ matrix.base_container.version_tag }}"
          only-fixed: true
          severity-cutoff: critical
          fail-build: false

      - name: Upload Base Vulnerability Scan
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.base-vulnerability-scan.outputs.sarif }}

      # OpenSCAP Scan for Base Container
      - name: Run OpenSCAP Scan for Base
        run: docker build . --file Dockerfile.Openscap --build-arg CONTAINER="localbuild/${{ matrix.base_container.repo_name }}:${{ matrix.base_container.version_tag }}" --tag "localbuild/${{ matrix.base_container.repo_name }}:${{ matrix.base_container.version_tag }}-scap"

      - uses: shrink/actions-docker-extract@v3
        id: "base-extract-openscap"
        with:
          image: "localbuild/${{ matrix.base_container.repo_name }}:${{ matrix.base_container.version_tag }}-scap"
          path: /tmp/openscap.html
          destination: base-openscap-output

      - name: Upload OpenSCAP Results for Base
        uses: actions/upload-artifact@v4
        with:
          name: "OpenSCAP Scan Results - ${{ matrix.base_container.name }}"
          path: base-openscap-output

      # Inspec Scan for Base Container
      - name: Run Inspec Scan for Base
        run: docker build . --file Dockerfile.inspec --build-arg CONTAINER="localbuild/${{ matrix.base_container.repo_name }}:${{ matrix.base_container.version_tag }}" --tag "localbuild/${{ matrix.base_container.repo_name }}:${{ matrix.base_container.version_tag }}-inspec"

      - name: Extract Inspec Results for Base
        uses: shrink/actions-docker-extract@v3
        with:
          image: "localbuild/${{ matrix.base_container.repo_name }}:${{ matrix.base_container.version_tag }}-inspec"
          path: /tmp/junit.xml
          destination: base-inspec-output

      - name: Publish Inspec Test Results for Base
        uses: EnricoMi/publish-unit-test-result-action/linux@v2
        with:
          files: |
            base-inspec-output/junit.xml

  build-app-containers:
    runs-on: ubuntu-latest
    needs: build-base-containers
    strategy:
      matrix:
        app_container:
          - {name: "jenkins", repo_name: "localbuild/jenkins", dockerfile: "Dockerfile.jenkins", version_tag: "2.449", base_image: "localbuild/ubi-openjdk:latest"}
          # Add additional app containers here.

    steps:
      - uses: actions/checkout@v4

      # Load cached Docker layers for base images
      - name: Load cached Docker layers for base images
        uses: actions/cache@v3
        with:
          path: /tmp/.docker-cache
          key: docker-build-localbuild-ubi-openjdk-latest

      # Build App Containers using the cached base images
      - name: Build App Docker Image
        run: |
          docker build . \
            --file ${{ matrix.app_container.dockerfile }} \
            --build-arg BASE_IMAGE="${{ matrix.app_container.base_image }}" \
            --tag "${{ matrix.app_container.repo_name }}:${{ matrix.app_container.version_tag }}"

      # Vulnerability scan for the app containers
      - name: Vulnerability scan app image
        id: app-vulnerability-scan
        uses: anchore/scan-action@v3
        with:
          image: "${{ matrix.app_container.repo_name }}:${{ matrix.app_container.version_tag }}"
          only-fixed: true
          severity-cutoff: critical
          fail-build: false

      - name: Upload App Vulnerability Scan
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.app-vulnerability-scan.outputs.sarif }}

      # OpenSCAP Scan for App Containers
      - name: Run OpenSCAP Scan for App
        run: docker build . --file Dockerfile.Openscap --build-arg CONTAINER="${{ matrix.app_container.repo_name }}:${{ matrix.app_container.version_tag }}" --tag "${{ matrix.app_container.repo_name }}:${{ matrix.app_container.version_tag }}-scap"

      - uses: shrink/actions-docker-extract@v3
        id: "app-extract-openscap"
        with:
          image: "${{ matrix.app_container.repo_name }}:${{ matrix.app_container.version_tag }}-scap"
          path: /tmp/openscap.html
          destination: app-openscap-output

      - name: Upload OpenSCAP Results for App
        uses: actions/upload-artifact@v4
        with:
          name: "OpenSCAP Scan Results - ${{ matrix.app_container.name }}"
          path: app-openscap-output

      # Inspec Scan for App Containers
      - name: Run Inspec Scan for App
        run: docker build . --file Dockerfile.inspec --build-arg CONTAINER="${{ matrix.app_container.repo_name }}:${{ matrix.app_container.version_tag }}" --tag "${{ matrix.app_container.repo_name }}:${{ matrix.app_container.version_tag }}-inspec"

      - name: Extract Inspec Results for App
        uses: shrink/actions-docker-extract@v3
        with:
          image: "${{ matrix.app_container.repo_name }}:${{ matrix.app_container.version_tag }}-inspec"
          path: /tmp/junit.xml
          destination: app-inspec-output

      - name: Publish Inspec Test Results for App
        uses: EnricoMi/publish-unit-test-result-action/linux@v2
        with:
          files: |
            app-inspec-output/junit.xml

      # Tag and Push App Containers to DockerHub (Optional)
      - name: Tag and Push App Docker Image
        if: github.event_name == 'push'
        run: |
          docker tag "${{ matrix.app_container.repo_name }}:${{ matrix.app_container.version_tag }}" "${{ secrets.DOCKER_USERNAME }}/${{ matrix.app_container.repo_name }}:${{ matrix.app_container.version_tag }}"
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push "${{ secrets.DOCKER_USERNAME }}/${{ matrix.app_container.repo_name }}:${{ matrix.app_container.version_tag }}"

      - name: Docker logout
        if: github.event_name == 'push'
        run: docker logout
